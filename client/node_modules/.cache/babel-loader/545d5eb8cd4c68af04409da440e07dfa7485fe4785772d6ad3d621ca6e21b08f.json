{"ast":null,"code":"var _s = $RefreshSig$();\n//Fetch question hook to fetch api data and set value to the store\n\nimport { useEffect, useState } from \"react\";\nimport data from \"../database/data\";\nimport { useDispatch } from \"react-redux\";\n\n//redux actions\nimport * as Action from \"../redux/questionReducer\";\nexport const useFetchQuestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  // const [getData,setGetData] =  useState({ isLoading: false, apiData:[], serverError:null })\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n\n  // useEffect(() => {\n  //         setGetData(prev => ({...prev, isLoading : true}));\n\n  //         /** async function fetch backend data */\n  //         (async () => {\n  //             try {\n  //                 let question = await data;\n\n  //                 if(question.length > 0){\n  //                     setGetData(prev => ({...prev, isLoading : false}));\n  //                     setGetData(prev => ({...prev, apiData : question}));\n\n  //                     /** dispatch an action */\n  //                     dispatch(Action.startExamAction(question))\n  //                 } else{\n  //                     throw new Error(\"No Question Avalibale\");\n  //                 }\n  //             } catch (error) {\n  //                 setGetData(prev => ({...prev, isLoading : false}));\n  //                 setGetData(prev => ({...prev, serverError : error}));\n  //             }\n  //         })();\n  //     }, [dispatch]);\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        let question = await data;\n        if (question.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: question\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction(question));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n// import { useEffect, useState } from \"react\"\n// import { useDispatch } from \"react-redux\";\n// import data from \"../database/data\";\n\n// /** redux actions */\n// import * as Action from '../redux/questionReducer'\n\n// /** fetch question hook to fetch api data and set value to store */\n// export const useFetchQuestion = () => {\n//     const dispatch = useDispatch();   \n//     const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n//     useEffect(() => {\n//         setGetData(prev => ({...prev, isLoading : true}));\n\n//         /** async function fetch backend data */\n//         (async () => {\n//             try {\n//                 let question = await data;\n\n//                 if(question.length > 0){\n//                     setGetData(prev => ({...prev, isLoading : false}));\n//                     setGetData(prev => ({...prev, apiData : question}));\n\n//                     /** dispatch an action */\n//                     dispatch(Action.startExamAction(question))\n//                 } else{\n//                     throw new Error(\"No Question Avalibale\");\n//                 }\n//             } catch (error) {\n//                 setGetData(prev => ({...prev, isLoading : false}));\n//                 setGetData(prev => ({...prev, serverError : error}));\n//             }\n//         })();\n//     }, [dispatch]);\n\n//     return [getData, setGetData];\n// }\n_s(useFetchQuestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","data","useDispatch","Action","useFetchQuestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","question","length","startExamAction","Error","error"],"sources":["/media/deepak/New Volume/reactproject/quiz/client/src/hooks/FetchQuestion.js"],"sourcesContent":["\n//Fetch question hook to fetch api data and set value to the store\n\nimport { useEffect, useState } from \"react\"\nimport data from \"../database/data\"\nimport { useDispatch } from \"react-redux\"\n\n//redux actions\nimport * as Action from \"../redux/questionReducer\"\n\nexport const useFetchQuestion =()=>{\n  const dispatch = useDispatch()\n  // const [getData,setGetData] =  useState({ isLoading: false, apiData:[], serverError:null })\n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    // useEffect(() => {\n      //         setGetData(prev => ({...prev, isLoading : true}));\n      \n      //         /** async function fetch backend data */\n      //         (async () => {\n      //             try {\n      //                 let question = await data;\n      \n      //                 if(question.length > 0){\n      //                     setGetData(prev => ({...prev, isLoading : false}));\n      //                     setGetData(prev => ({...prev, apiData : question}));\n      \n      //                     /** dispatch an action */\n      //                     dispatch(Action.startExamAction(question))\n      //                 } else{\n      //                     throw new Error(\"No Question Avalibale\");\n      //                 }\n      //             } catch (error) {\n      //                 setGetData(prev => ({...prev, isLoading : false}));\n      //                 setGetData(prev => ({...prev, serverError : error}));\n      //             }\n      //         })();\n      //     }, [dispatch]);\n      useEffect(() => {\n                setGetData(prev => ({...prev, isLoading : true}));\n        \n                /** async function fetch backend data */\n                (async () => {\n                    try {\n                        let question = await data;\n        \n                        if(question.length > 0){\n                            setGetData(prev => ({...prev, isLoading : false}));\n                            setGetData(prev => ({...prev, apiData : question}));\n        \n                            /** dispatch an action */\n                            dispatch(Action.startExamAction(question))\n                        } else{\n                            throw new Error(\"No Question Avalibale\");\n                        }\n                    } catch (error) {\n                        setGetData(prev => ({...prev, isLoading : false}));\n                        setGetData(prev => ({...prev, serverError : error}));\n                    }\n                })();\n            }, [dispatch]);\n  return [getData, setGetData]\n}\n\n\n// import { useEffect, useState } from \"react\"\n// import { useDispatch } from \"react-redux\";\n// import data from \"../database/data\";\n\n// /** redux actions */\n// import * as Action from '../redux/questionReducer'\n\n// /** fetch question hook to fetch api data and set value to store */\n// export const useFetchQuestion = () => {\n//     const dispatch = useDispatch();   \n//     const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n//     useEffect(() => {\n//         setGetData(prev => ({...prev, isLoading : true}));\n\n//         /** async function fetch backend data */\n//         (async () => {\n//             try {\n//                 let question = await data;\n\n//                 if(question.length > 0){\n//                     setGetData(prev => ({...prev, isLoading : false}));\n//                     setGetData(prev => ({...prev, apiData : question}));\n\n//                     /** dispatch an action */\n//                     dispatch(Action.startExamAction(question))\n//                 } else{\n//                     throw new Error(\"No Question Avalibale\");\n//                 }\n//             } catch (error) {\n//                 setGetData(prev => ({...prev, isLoading : false}));\n//                 setGetData(prev => ({...prev, serverError : error}));\n//             }\n//         })();\n//     }, [dispatch]);\n\n//     return [getData, setGetData];\n// }\n"],"mappings":";AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,kBAAkB;AACnC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,OAAO,KAAKC,MAAM,MAAM,0BAA0B;AAElD,OAAO,MAAMC,gBAAgB,GAAEA,CAAA,KAAI;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B;EACE,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;;EAE7F;EACE;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAZ,SAAS,CAAC,MAAM;IACNS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,IAAII,QAAQ,GAAG,MAAMZ,IAAI;QAEzB,IAAGY,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAC;UACnBN,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAQ,CAAC,CAAC,CAAC;;UAEnD;UACAP,QAAQ,CAACH,MAAM,CAACY,eAAe,CAACF,QAAQ,CAAC,CAAC;QAC9C,CAAC,MAAK;UACF,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZT,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGM;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,GAAG;EACR,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;EACxB,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAC9B,CAAC;;AAGD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAH,EAAA,CA5FaD,gBAAgB;EAAA,QACVF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}