{"ast":null,"code":"var _s = $RefreshSig$();\n//Fetch question hook to fetch api data and set value to the store\n\nimport { useEffect, useState } from \"react\";\nimport data from \"../database/data\";\nimport { useDispatch } from \"react-redux\";\n\n//redux actions\nimport * as Action from \"../redux/questionReducer\";\nexport const useFetchQuestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }))\n    // async function fetch backend data\n    (async () => {\n      try {\n        let question = await data;\n        if (question.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: question\n          }));\n\n          //dispatch an action\n          dispatch(Action.startExamAction(question));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n_s(useFetchQuestion, \"Qwn5f7i+Q3pu0rqz7gPuvxApt6w=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","data","useDispatch","Action","useFetchQuestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","question","length","startExamAction","Error","error"],"sources":["/media/deepak/New Volume/reactproject/quiz/client/src/hooks/FetchQuestion.js"],"sourcesContent":["\n//Fetch question hook to fetch api data and set value to the store\n\nimport { useEffect, useState } from \"react\"\nimport data from \"../database/data\"\nimport { useDispatch } from \"react-redux\"\n\n//redux actions\nimport * as Action from \"../redux/questionReducer\"\n\nexport const useFetchQuestion =()=>{\n  const dispatch = useDispatch()\n  const [getData,setGetData] =  useState({ isLoading: false, apiData:[], serverError:null })\n\n  useEffect(()=>{\n\n    setGetData(prev => ({...prev, isLoading:true}))\n    // async function fetch backend data\n    (async()=>{\ntry {\n  let question = await data;\n  if(question.length>0){\n    setGetData(prev => ({...prev, isLoading:false}))\n    setGetData(prev => ({...prev, apiData:question}))\n\n    //dispatch an action\ndispatch(Action.startExamAction(question))\n  }\n  else{\n    throw new Error(\"No Question Available\")\n  }\n} catch (error) {\n\n  setGetData(prev => ({...prev, isLoading:false}))\n  setGetData(prev => ({...prev, serverError:error}))\n\n}\n    })();\n  },[dispatch])\n  return [getData, setGetData]\n}\n"],"mappings":";AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,kBAAkB;AACnC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,OAAO,KAAKC,MAAM,MAAM,0BAA0B;AAElD,OAAO,MAAMC,gBAAgB,GAAEA,CAAA,KAAI;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAM,CAACK,OAAO,EAACC,UAAU,CAAC,GAAIR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAC,EAAE;IAAEC,WAAW,EAAC;EAAK,CAAC,CAAC;EAE1FZ,SAAS,CAAC,MAAI;IAEZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAC;IAAI,CAAC,CAAC;IAC9C;IAAA,CACC,YAAS;MACd,IAAI;QACF,IAAII,QAAQ,GAAG,MAAMZ,IAAI;QACzB,IAAGY,QAAQ,CAACC,MAAM,GAAC,CAAC,EAAC;UACnBN,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAC;UAAK,CAAC,CAAC,CAAC;UAChDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAACG;UAAQ,CAAC,CAAC,CAAC;;UAEjD;UACJP,QAAQ,CAACH,MAAM,CAACY,eAAe,CAACF,QAAQ,CAAC,CAAC;QACxC,CAAC,MACG;UACF,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QAEdT,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAC;QAAK,CAAC,CAAC,CAAC;QAChDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAACM;QAAK,CAAC,CAAC,CAAC;MAEpD;IACI,CAAC,CAAC,EAAE;EACN,CAAC,EAAC,CAACX,QAAQ,CAAC,CAAC;EACb,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAC9B,CAAC;AAAAH,EAAA,CA9BYD,gBAAgB;EAAA,QACVF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}