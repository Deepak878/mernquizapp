{"ast":null,"code":"var _s = $RefreshSig$();\n// //Fetch question hook to fetch api data and set value to the store\n\n// import { useEffect, useState } from \"react\"\n// import data from \"../database/data\"\n// import { useDispatch } from \"react-redux\"\n\n// //redux actions\n// import * as Action from \"../redux/questionReducer\"\n\n// export const useFetchQuestion =()=>{\n//   const dispatch = useDispatch()\n//   const [getData,setGetData] =  useState({ isLoading: false, apiData:[], serverError:null })\n\n//   useEffect(()=>{\n\n//     setGetData(prev => ({...prev, isLoading:true}))\n//     // async function fetch backend data\n//     (async()=>{\n// try {\n//   let question = await data;\n//   if(question.length>0){\n//     setGetData(prev => ({...prev, isLoading:false}))\n//     setGetData(prev => ({...prev, apiData:question}))\n\n//     //dispatch an action\n// dispatch(Action.startExamAction(question))\n//   }\n//   else{\n//     throw new Error(\"No Question Available\")\n//   }\n// } catch (error) {\n\n//   setGetData(prev => ({...prev, isLoading:false}))\n//   setGetData(prev => ({...prev, serverError:error}))\n\n// }\n//     })();\n//   },[dispatch])\n//   return [getData, setGetData]\n// }\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport data from \"../database/data\";\n\n/** redux actions */\nimport * as Action from '../redux/questionReducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQuestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        let question = await data;\n        if (question.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: question\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction(question));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n_s(useFetchQuestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","useDispatch","data","Action","useFetchQuestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","question","length","startExamAction","Error","error"],"sources":["/media/deepak/New Volume/reactproject/quiz/client/src/hooks/FetchQuestion.js"],"sourcesContent":["\n// //Fetch question hook to fetch api data and set value to the store\n\n// import { useEffect, useState } from \"react\"\n// import data from \"../database/data\"\n// import { useDispatch } from \"react-redux\"\n\n// //redux actions\n// import * as Action from \"../redux/questionReducer\"\n\n// export const useFetchQuestion =()=>{\n//   const dispatch = useDispatch()\n//   const [getData,setGetData] =  useState({ isLoading: false, apiData:[], serverError:null })\n\n//   useEffect(()=>{\n\n//     setGetData(prev => ({...prev, isLoading:true}))\n//     // async function fetch backend data\n//     (async()=>{\n// try {\n//   let question = await data;\n//   if(question.length>0){\n//     setGetData(prev => ({...prev, isLoading:false}))\n//     setGetData(prev => ({...prev, apiData:question}))\n\n//     //dispatch an action\n// dispatch(Action.startExamAction(question))\n//   }\n//   else{\n//     throw new Error(\"No Question Available\")\n//   }\n// } catch (error) {\n\n//   setGetData(prev => ({...prev, isLoading:false}))\n//   setGetData(prev => ({...prev, serverError:error}))\n\n// }\n//     })();\n//   },[dispatch])\n//   return [getData, setGetData]\n// }\n\n\nimport { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport data from \"../database/data\";\n\n/** redux actions */\nimport * as Action from '../redux/questionReducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQuestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                let question = await data;\n\n                if(question.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : question}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction(question))\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n"],"mappings":";AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,IAAI,MAAM,kBAAkB;;AAEnC;AACA,OAAO,KAAKC,MAAM,MAAM,0BAA0B;;AAElD;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,IAAII,QAAQ,GAAG,MAAMX,IAAI;QAEzB,IAAGW,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAC;UACnBN,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAQ,CAAC,CAAC,CAAC;;UAEnD;UACAP,QAAQ,CAACH,MAAM,CAACY,eAAe,CAACF,QAAQ,CAAC,CAAC;QAC9C,CAAC,MAAK;UACF,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZT,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGM;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,GAAG;EACR,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;AAAAH,EAAA,CA7BYD,gBAAgB;EAAA,QACRH,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}